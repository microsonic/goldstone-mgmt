Index: goldstone-mgmt/sm/sysrepo-python/cffi/cdefs.h
===================================================================
--- goldstone-mgmt.orig/sm/sysrepo-python/cffi/cdefs.h
+++ goldstone-mgmt/sm/sysrepo-python/cffi/cdefs.h
@@ -242,3 +242,30 @@ int sr_oper_get_items_subscribe(
 	sr_session_ctx_t *, const char *module, const char *xpath,
 	int (*)(sr_session_ctx_t *, const char *, const char *, const char *, uint32_t, struct lyd_node **, void *),
 	void *priv, sr_subscr_options_t, sr_subscription_ctx_t **);
+
+typedef enum sr_ev_notif_type_e {
+	SR_EV_NOTIF_REALTIME,
+	SR_EV_NOTIF_REPLAY,
+	SR_EV_NOTIF_REPLAY_COMPLETE,
+	SR_EV_NOTIF_STOP,
+	...
+} sr_ev_notif_type_t;
+
+extern "Python" void srpy_event_notif_cb(
+	sr_session_ctx_t *, const sr_ev_notif_type_t notif_type, const char *xpath,
+	const sr_val_t *values, const size_t values_cnt, time_t timestamp, void *priv);
+
+extern "Python" void srpy_event_notif_tree_cb(
+	sr_session_ctx_t *, const sr_ev_notif_type_t notif_type, const struct lyd_node *notif,
+	time_t timestamp, void *priv);
+
+int sr_event_notif_subscribe(sr_session_ctx_t *, const char *module_name, const char *xpath, time_t start_time, time_t stop_time,
+	void (*)(sr_session_ctx_t *, const sr_ev_notif_type_t, const char*, const sr_val_t*, const size_t, time_t, void*),
+	void *priv, sr_subscr_options_t, sr_subscription_ctx_t **);
+
+int sr_event_notif_subscribe_tree(sr_session_ctx_t *, const char *module_name, const char *xpath, time_t start_time, time_t stop_time,
+	void (*)(sr_session_ctx_t *, const sr_ev_notif_type_t, const struct lyd_node*, time_t, void*),
+	void *priv, sr_subscr_options_t, sr_subscription_ctx_t **);
+
+int sr_event_notif_send(sr_session_ctx_t *, const char *path, const sr_val_t *values, const size_t values_cnt);
+int sr_event_notif_send_tree(sr_session_ctx_t *, struct lyd_node *notif);
Index: goldstone-mgmt/sm/sysrepo-python/sysrepo/session.py
===================================================================
--- goldstone-mgmt.orig/sm/sysrepo-python/sysrepo/session.py
+++ goldstone-mgmt/sm/sysrepo-python/sysrepo/session.py
@@ -450,6 +450,104 @@ class SysrepoSession:
 
         self.subscriptions.append(sub)
 
+    NotificationCallbackType = Callable[[str, str, Any, int, Any], Optional[Dict]]
+    def subscribe_notification(
+        self,
+        module: str,
+        xpath: str,
+        start_time: int,
+        stop_time: int,
+        callback: NotificationCallbackType,
+        *,
+        no_thread: bool = False,
+        passive: bool = False,
+        done_only: bool = False,
+        enabled: bool = False,
+        private_data: Any = None,
+        include_implicit_defaults: bool = True
+    ) -> None:
+
+        if self.is_implicit:
+            raise SysrepoUnsupportedError("cannot subscribe with implicit sessions")
+        _check_subscription_callback(callback, self.NotificationCallbackType)
+
+        sub = Subscription(
+            callback,
+            private_data,
+        )
+
+        sub_p = ffi.new("sr_subscription_ctx_t **")
+
+        flags = _subscribe_flags(
+            no_thread=no_thread, passive=passive, done_only=done_only, enabled=enabled
+        )
+
+        check_call(
+            lib.sr_event_notif_subscribe,
+            self.cdata,
+            str2c(module),
+            str2c(xpath),
+            start_time,
+            stop_time,
+            lib.srpy_event_notif_cb,
+            sub.handle,
+            flags,
+            sub_p,
+        )
+        sub.init(sub_p[0])
+
+        self.subscriptions.append(sub)
+
+    NotificationTreeCallbackType = Callable[[str, Any, int, Any], Optional[Dict]]
+    def subscribe_notification_tree(
+        self,
+        module: str,
+        xpath: str,
+        start_time: int,
+        stop_time: int,
+        callback: NotificationCallbackType,
+        *,
+        no_thread: bool = False,
+        passive: bool = False,
+        done_only: bool = False,
+        enabled: bool = False,
+        private_data: Any = None,
+        include_implicit_defaults: bool = True
+    ) -> None:
+
+        if self.is_implicit:
+            raise SysrepoUnsupportedError("cannot subscribe with implicit sessions")
+        _check_subscription_callback(callback, self.NotificationTreeCallbackType)
+
+        sub = Subscription(
+            callback,
+            private_data,
+        )
+
+        sub_p = ffi.new("sr_subscription_ctx_t **")
+
+        flags = _subscribe_flags(
+            no_thread=no_thread, passive=passive, done_only=done_only, enabled=enabled
+        )
+
+        check_call(
+            lib.sr_event_notif_subscribe_tree,
+            self.cdata,
+            str2c(module),
+            str2c(xpath),
+            start_time,
+            stop_time,
+            lib.srpy_event_notif_tree_cb,
+            sub.handle,
+            flags,
+            sub_p,
+        )
+        sub.init(sub_p[0])
+
+        self.subscriptions.append(sub)
+
+
+
     # end: subscription
 
     # begin: changes
@@ -1000,6 +1098,21 @@ class SysrepoSession:
         finally:
             out_dnode.free()
 
+    def notification_send_ly(
+        self, notif: libyang.DNode
+    ) -> None:
+        """
+        Send a notification
+
+        :raises SysrepoError:
+            If the notification callback failed.
+        """
+        if not isinstance(notif, libyang.DNode):
+            raise TypeError("notif must be a libyang.DNode")
+        # libyang and sysrepo bindings are different, casting is required
+        in_dnode = ffi.cast("struct lyd_node *", notif.cdata)
+        check_call(lib.sr_event_notif_send_tree, self.cdata, in_dnode)
+
 
 # -------------------------------------------------------------------------------------
 DATASTORE_VALUES = {
Index: goldstone-mgmt/sm/sysrepo-python/sysrepo/subscription.py
===================================================================
--- goldstone-mgmt.orig/sm/sysrepo-python/sysrepo/subscription.py
+++ goldstone-mgmt/sm/sysrepo-python/sysrepo/subscription.py
@@ -11,7 +11,7 @@ from libyang.data import DNode
 from _sysrepo import ffi, lib
 from .errors import SysrepoError, check_call
 from .util import c2str, is_async_func
-
+from .value import Value
 
 LOG = logging.getLogger(__name__)
 
@@ -160,6 +160,13 @@ EVENT_NAMES = {
     lib.SR_EV_RPC: "rpc",
 }
 
+NOTIF_NAMES = {
+    lib.SR_EV_NOTIF_REALTIME: "realtime",
+    lib.SR_EV_NOTIF_REPLAY: "replay",
+    lib.SR_EV_NOTIF_REPLAY_COMPLETE: "replay_complete",
+    lib.SR_EV_NOTIF_STOP: "stop"
+}
+
 
 # ------------------------------------------------------------------------------
 @ffi.def_extern(name="srpy_module_change_cb")
@@ -487,3 +494,77 @@ def rpc_callback(session, xpath, input_n
         if isinstance(session, SysrepoSession) and isinstance(xpath, str):
             session.set_error(xpath, str(e))
         return lib.SR_ERR_CALLBACK_FAILED
+
+@ffi.def_extern(name="srpy_event_notif_cb")
+def event_notif_callback(session, notif, xpath, values, values_cnt, timestamp, priv):
+    try:
+        # convert C arguments to python objects.
+        from .session import SysrepoSession  # circular import
+
+        session = SysrepoSession(session, True)
+        xpath = c2str(xpath)
+        subscription = ffi.from_handle(priv)
+        callback = subscription.callback
+        private_data = subscription.private_data
+        notif_name = NOTIF_NAMES[notif]
+
+        array = [Value.parse(values[i]) for i in range(values_cnt)]
+        callback(notif_name, xpath, array, timestamp, private_data)
+
+    except SysrepoError as e:
+        if (
+            event in (lib.SR_EV_UPDATE, lib.SR_EV_CHANGE)
+            and e.msg
+            and isinstance(session, SysrepoSession)
+            and isinstance(xpath, str)
+        ):
+            session.set_error(xpath, e.msg)
+
+    except BaseException as e:
+        # ATTENTION: catch all exceptions!
+        # including KeyboardInterrupt, CancelledError, etc.
+        # We are in a C callback, we cannot let any error pass
+        LOG.exception("%r callback failed", locals().get("callback", priv))
+        if (
+            event in (lib.SR_EV_UPDATE, lib.SR_EV_CHANGE)
+            and isinstance(session, SysrepoSession)
+            and isinstance(xpath, str)
+        ):
+            session.set_error(xpath, str(e))
+
+@ffi.def_extern(name="srpy_event_notif_tree_cb")
+def event_notif_tree_callback(session, notif, dnode, timestamp, priv):
+    try:
+        # convert C arguments to python objects.
+        from .session import SysrepoSession  # circular import
+
+        session = SysrepoSession(session, True)
+        subscription = ffi.from_handle(priv)
+        callback = subscription.callback
+        private_data = subscription.private_data
+        notif_name = NOTIF_NAMES[notif]
+
+        ly_ctx = session.get_ly_ctx()
+        value = DNode.new(ly_ctx, dnode)
+        callback(notif_name, value, timestamp, private_data)
+
+    except SysrepoError as e:
+        if (
+            event in (lib.SR_EV_UPDATE, lib.SR_EV_CHANGE)
+            and e.msg
+            and isinstance(session, SysrepoSession)
+            and isinstance(xpath, str)
+        ):
+            session.set_error(xpath, e.msg)
+
+    except BaseException as e:
+        # ATTENTION: catch all exceptions!
+        # including KeyboardInterrupt, CancelledError, etc.
+        # We are in a C callback, we cannot let any error pass
+        LOG.exception("%r callback failed", locals().get("callback", priv))
+        if (
+            event in (lib.SR_EV_UPDATE, lib.SR_EV_CHANGE)
+            and isinstance(session, SysrepoSession)
+            and isinstance(xpath, str)
+        ):
+            session.set_error(xpath, str(e))
Index: goldstone-mgmt/sm/sysrepo-python/sysrepo/value.py
===================================================================
--- goldstone-mgmt.orig/sm/sysrepo-python/sysrepo/value.py
+++ goldstone-mgmt/sm/sysrepo-python/sysrepo/value.py
@@ -49,7 +49,7 @@ class Value:
     def __repr__(self) -> str:
         if self.value_field is not None:
             if self.xpath is not None:
-                s = "%s: %s" % (self.xpath, self)
+                s = "%s: %s" % (self.xpath, str(self))
             else:
                 s = str(self)
         else:
