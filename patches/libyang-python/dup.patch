Index: goldstone-mgmt/sm/libyang-python/cffi/cdefs.h
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/cffi/cdefs.h
+++ goldstone-mgmt/sm/libyang-python/cffi/cdefs.h
@@ -454,6 +454,14 @@ void lyd_free_withsiblings(struct lyd_no
 int lyd_validate(struct lyd_node **, int, void *);
 int lyd_merge(struct lyd_node *, const struct lyd_node *, int);
 
+#define LYD_DUP_OPT_RECURSIVE ...
+#define LYD_DUP_OPT_NO_ATTR ...
+#define LYD_DUP_OPT_WITH_PARENTS ...
+#define LYD_DUP_OPT_WITH_KEYS ...
+#define LYD_DUP_OPT_WITH_WHEN ...
+
+struct lyd_node *lyd_dup(const struct lyd_node *node, int options);
+
 /* from libc, needed to free allocated strings */
 void free(void *);
 
Index: goldstone-mgmt/sm/libyang-python/libyang/data.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/libyang/data.py
+++ goldstone-mgmt/sm/libyang-python/libyang/data.py
@@ -109,6 +109,26 @@ def parser_flags(
         flags |= lib.LYD_OPT_EXPLICIT
     return flags
 
+# -------------------------------------------------------------------------------------
+def dup_flags(
+    recursive: bool = False,
+    no_attr: bool = False,
+    with_parents: bool = False,
+    with_keys: bool = False,
+    with_when: bool = False
+) -> int:
+    flags = 0
+    if recursive:
+        flags |= lib.LYD_DUP_OPT_RECURSIVE
+    if no_attr:
+        flags |= lib.LYD_DUP_OPT_NO_ATTR
+    if with_parents:
+        flags |= lib.LYD_DUP_OPT_WITH_PARENTS
+    if with_keys:
+        flags |= lib.LYD_DUP_OPT_WITH_KEYS
+    if with_when:
+        flags |= lib.LYD_DUP_OPT_WITH_WHEN
+    return flags
 
 # -------------------------------------------------------------------------------------
 class DNode:
@@ -133,6 +153,24 @@ class DNode:
         deprecated("_node", "cdata", "2.0.0")
         return self.cdata
 
+    def dup(
+        self,
+        recursive: bool = False,
+        no_attr: bool = False,
+        with_parents: bool = False,
+        with_keys: bool = False,
+        with_when: bool = False
+    ) -> "DNode":
+        flags = dup_flags(
+            recursive=recursive,
+            no_attr=no_attr,
+            with_parents=with_parents,
+            with_keys=with_keys,
+            with_when=with_when,
+        )
+        d = lib.lyd_dup(self.cdata, flags)
+        return self.new(self.context, d)
+
     def name(self) -> str:
         return c2str(self.cdata.schema.name)
 
