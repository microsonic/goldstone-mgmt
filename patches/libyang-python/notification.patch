Index: goldstone-mgmt/sm/libyang-python/cffi/cdefs.h
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/cffi/cdefs.h
+++ goldstone-mgmt/sm/libyang-python/cffi/cdefs.h
@@ -405,6 +405,7 @@ typedef enum {
 #define LYD_OPT_DATA_NO_YANGLIB ...
 #define LYD_OPT_RPC ...
 #define LYD_OPT_RPCREPLY ...
+#define LYD_OPT_NOTIF ...
 #define LYD_OPT_EXPLICIT ...
 #define LYD_OPT_DESTRUCT ...
 #define LYD_OPT_NOSIBLINGS ...
Index: goldstone-mgmt/sm/libyang-python/libyang/context.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/libyang/context.py
+++ goldstone-mgmt/sm/libyang-python/libyang/context.py
@@ -200,6 +200,7 @@ class Context:
         edit: bool = False,
         rpc: bool = False,
         rpcreply: bool = False,
+        notification: bool = False,
         strict: bool = False,
         trusted: bool = False,
         no_yanglib: bool = False,
@@ -216,6 +217,7 @@ class Context:
             edit=edit,
             rpc=rpc,
             rpcreply=rpcreply,
+            notification=notification,
             strict=strict,
             trusted=trusted,
             no_yanglib=no_yanglib,
@@ -230,7 +232,7 @@ class Context:
             if rpc_request is None:
                 raise ValueError("rpc_request node is required when rpcreply=True")
             args.append(rpc_request.cdata)
-        if rpc or rpcreply:
+        if rpc or rpcreply or notification:
             if data_tree is not None:
                 args.append(data_tree.cdata)
             else:
Index: goldstone-mgmt/sm/libyang-python/libyang/data.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/libyang/data.py
+++ goldstone-mgmt/sm/libyang-python/libyang/data.py
@@ -69,6 +69,7 @@ def parser_flags(
     edit: bool = False,
     rpc: bool = False,
     rpcreply: bool = False,
+    notification: bool = False,
     strict: bool = False,
     trusted: bool = False,
     no_yanglib: bool = False,
@@ -76,7 +77,7 @@ def parser_flags(
     no_siblings: bool = False,
     explicit: bool = False,
 ) -> int:
-    if (data, config, get, getconfig, edit, rpc, rpcreply).count(True) > 1:
+    if (data, config, get, getconfig, edit, rpc, rpcreply, notification).count(True) > 1:
         raise ValueError(
             "Only one of data, config, get, getconfig, edit, rpc, rpcreply can be True"
         )
@@ -95,6 +96,8 @@ def parser_flags(
         flags |= lib.LYD_OPT_RPC
     if rpcreply:
         flags |= lib.LYD_OPT_RPCREPLY
+    if notification:
+        flags |= lib.LYD_OPT_NOTIF
     if strict:
         flags |= lib.LYD_OPT_STRICT
     if trusted:
@@ -394,7 +397,7 @@ class DNode:
                 if name not in parent_dic:
                     parent_dic[name] = _init_yang_list(node.schema)
                 parent_dic[name].append(list_element)
-            elif node.schema.nodetype & (SNode.CONTAINER | SNode.RPC | SNode.ACTION):
+            elif node.schema.nodetype & (SNode.CONTAINER | SNode.RPC | SNode.ACTION | SNode.NOTIF):
                 container = {}
                 child = node.child
                 while child:
@@ -585,6 +588,11 @@ class DLeaf(DNode):
 class DLeafList(DLeaf):
     pass
 
+# -------------------------------------------------------------------------------------
+@DNode.register(SNode.NOTIF)
+class DNotif(DContainer):
+    pass
+
 
 # -------------------------------------------------------------------------------------
 def dict_to_dnode(
Index: goldstone-mgmt/sm/libyang-python/libyang/schema.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/libyang/schema.py
+++ goldstone-mgmt/sm/libyang-python/libyang/schema.py
@@ -729,6 +729,7 @@ class SNode:
     ACTION = lib.LYS_ACTION
     INPUT = lib.LYS_INPUT
     OUTPUT = lib.LYS_OUTPUT
+    NOTIF = lib.LYS_NOTIF
     KEYWORDS = {
         CONTAINER: "container",
         LEAF: "leaf",
@@ -738,6 +739,7 @@ class SNode:
         ACTION: "action",
         INPUT: "input",
         OUTPUT: "output",
+        NOTIF: "notification",
     }
 
     def __init__(self, context: "libyang.Context", cdata):
