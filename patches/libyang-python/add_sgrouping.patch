Index: goldstone-mgmt/sm/libyang-python/cffi/cdefs.h
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/cffi/cdefs.h
+++ goldstone-mgmt/sm/libyang-python/cffi/cdefs.h
@@ -315,6 +315,10 @@ struct lys_node_list {
 	...;
 };
 
+struct lys_node_grp {
+	...;
+};
+
 union ly_set_set {
 	struct lys_node **s;
 	...;
Index: goldstone-mgmt/sm/libyang-python/libyang/schema.py
===================================================================
--- goldstone-mgmt.orig/sm/libyang-python/libyang/schema.py
+++ goldstone-mgmt/sm/libyang-python/libyang/schema.py
@@ -732,6 +732,7 @@ class SNode:
     INPUT = lib.LYS_INPUT
     OUTPUT = lib.LYS_OUTPUT
     NOTIF = lib.LYS_NOTIF
+    GROUPING = lib.LYS_GROUPING
     KEYWORDS = {
         CONTAINER: "container",
         LEAF: "leaf",
@@ -742,6 +743,7 @@ class SNode:
         INPUT: "input",
         OUTPUT: "output",
         NOTIF: "notification",
+        GROUPING: "grouping",
     }
 
     def __init__(self, context: "libyang.Context", cdata):
@@ -969,6 +971,22 @@ class SContainer(SNode):
     def children(self, types: Optional[Tuple[int, ...]] = None) -> Iterator[SNode]:
         return iter_children(self.context, self.cdata, types=types)
 
+@SNode.register(SNode.GROUPING)
+class SGrouping(SNode):
+
+    __slots__ = SNode.__slots__ + ("cdata_grouping",)
+
+    def __init__(self, context: "libyang.Context", cdata):
+        super().__init__(context, cdata)
+        self.cdata_grouping = ffi.cast("struct lys_node_grp *", cdata)
+
+    def __iter__(self) -> Iterator[SNode]:
+        return self.children()
+
+    def children(
+        self, skip_keys: bool = False, types: Optional[Tuple[int, ...]] = None
+    ) -> Iterator[SNode]:
+        return iter_children(self.context, self.cdata, skip_keys=skip_keys, types=types)
 
 # -------------------------------------------------------------------------------------
 @SNode.register(SNode.LIST)
